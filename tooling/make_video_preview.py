#!/usr/bin/env python3

import os
import sys
import subprocess
import json
import logging
from datetime import timedelta
from PIL import Image

# FRAME SETTINGS
GRID_COLS = 3
GRID_ROWS = 4
TOTAL_FRAMES = GRID_COLS * GRID_ROWS  # 12

# FRAME SIZE
THUMB_WIDTH = 320
THUMB_HEIGHT = 180

# FRAME QUALITY
OUTPUT_QUALITY = 85

TEMP_DIR = os.path.join(os.getcwd(), ".preview_cache")
BORDER_COLOR = (30, 30, 30)  # dark-grey
BORDER_SIZE = 1

logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.INFO)


# --- –ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö ---
def get_video_duration(filepath):
    cmd = ["ffprobe", "-v", "quiet", "-print_format", "json", "-show_entries", "format=duration", filepath]
    try:
        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        data = json.loads(result.stdout)
        return float(data["format"]["duration"])
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ: {e}")
        return None


# --- –ò–∑–≤–ª–µ—á—å –∫–∞–¥—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è ---
def extract_frame(filepath, timestamp, output_path):
    cmd = [
        "ffmpeg",
        "-ss",
        str(timestamp),
        "-i",
        filepath,
        "-frames:v",
        "1",
        "-f",
        "image2",
        "-y",  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å
        output_path,
    ]
    try:
        subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        return True
    except Exception:
        return False


# --- –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂ –∏–∑ –∫–∞–¥—Ä–æ–≤ ---
def create_collage(image_paths, output_path):
    if len(image_paths) != TOTAL_FRAMES:
        logging.error(f"‚ö† –û–∂–∏–¥–∞–µ—Ç—Å—è {TOTAL_FRAMES} –∫–∞–¥—Ä–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(image_paths)}")
        return False

    # –°–æ–∑–¥–∞—ë–º –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    collage_width = GRID_COLS * (THUMB_WIDTH + BORDER_SIZE) + BORDER_SIZE
    collage_height = GRID_ROWS * (THUMB_HEIGHT + BORDER_SIZE) + BORDER_SIZE
    collage = Image.new("RGB", (collage_width, collage_height), BORDER_COLOR)

    for idx, img_path in enumerate(image_paths):
        try:
            with Image.open(img_path) as img:
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
                img = img.resize((THUMB_WIDTH, THUMB_HEIGHT), Image.LANCZOS)
                # –ü–æ–∑–∏—Ü–∏—è
                row = idx // GRID_COLS
                col = idx % GRID_COLS
                x = col * (THUMB_WIDTH + BORDER_SIZE) + BORDER_SIZE
                y = row * (THUMB_HEIGHT + BORDER_SIZE) + BORDER_SIZE
                collage.paste(img, (x, y))
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–¥—Ä–∞ {img_path}: {e}")
            return False

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    collage.save(output_path, "JPEG", quality=OUTPUT_QUALITY, optimize=True)
    logging.info(f"‚úÖ –ö–æ–ª–ª–∞–∂ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
    return True


# --- –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ---
def cleanup_temp_files(temp_files):
    for f in temp_files:
        try:
            os.remove(f)
        except:
            pass


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def generate_preview(video_path):
    if not os.path.isfile(video_path):
        logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
        return False

    if not os.path.exists(TEMP_DIR):
        os.makedirs(TEMP_DIR)

    filename = os.path.basename(video_path)
    name, ext = os.path.splitext(filename)

    output_preview = os.path.join(os.path.dirname(video_path), f"{name}_preview.jpg")

    logging.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: {filename}")
    duration = get_video_duration(video_path)
    if not duration:
        return False

    logging.info(f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {timedelta(seconds=duration)}")
    logging.info(f"üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 12 –∫–∞–¥—Ä–æ–≤...")

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–∞–¥—Ä–æ–≤
    temp_files = []
    timestamps = []
    for i in range(TOTAL_FRAMES):
        t = duration * (i + 0.5) / TOTAL_FRAMES  # —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ, –Ω–µ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö
        timestamps.append(round(t, 2))

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤
    for i, t in enumerate(timestamps):
        temp_path = os.path.join(TEMP_DIR, f"frame_{i:02d}.jpg")
        if extract_frame(video_path, t, temp_path):
            temp_files.append(temp_path)
        else:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–¥—Ä –≤ {t} —Å–µ–∫")
            cleanup_temp_files(temp_files)
            return False

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞
    if create_collage(temp_files, output_preview):
        cleanup_temp_files(temp_files)  # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã
        return output_preview
    else:
        cleanup_temp_files(temp_files)
        return False


if __name__ == "__main__":
    video_file = "/home/takimoysha/linux-media/downloads/0-output.mp4"
    result = generate_preview(video_file)

    if result:
        logging.info(f"üéâ –ì–æ—Ç–æ–≤–æ: {result}")
    else:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é.")
        sys.exit(1)
